import supabase, { supabaseUrl } from './supabase';
export async function signUp({ email, password, firstName, lastName }) {
  // Step 1: Sign up the user
  const { data, error } = await supabase.auth.signUp({
    email,
    password,
    options: {
      data: {
        firstName,
        lastName,
        avatar: '', // Optional field for user profile images
      },
    },
  });

  // Step 2: Handle signup errors
  if (error) {
    throw new Error(`Signup failed: ${error.message}`);
  }

  const userId = data.user?.id; // Get the user ID generated by Supabase

  if (!userId) {
    throw new Error('User ID is missing after signup.');
  }

  // Step 3: Insert the user data into the custom "authUsers" table
  const { data: userData, error: userDataError } = await supabase
    .from('authUsers')
    .insert([
      {
        authUserId: userId,
        firstName: firstName,
        lastName: lastName,
        email: email,
        avatar: '',
      },
    ]);

  // Step 4: Handle insertion errors
  if (userDataError) {
    throw new Error(`Failed to insert user data: ${userDataError.message}`);
  }

  return { data, userData };
}

export async function loginUser({ email, password }) {
  const { data, error } = await supabase.auth.signInWithPassword({
    email: email,
    password: password,
  });

  if (error) {
    throw new Error(error.message);
  }
  return data;
}

export async function getUser() {
  const { data: session } = await supabase.auth.getSession();
  if (!session.session) return null;

  const { data, error } = await supabase.auth.getUser();
  if (error) {
    throw new Error(error.message);
  }

  return data?.user;
}

export async function logoutUser() {
  const { error } = await supabase.auth.signOut();
  if (error) {
    throw new Error(error.message);
  }
}

export async function updateUser({ firstName, lastName, password }) {
  let updatedObject;

  if (firstName && lastName) {
    updatedObject = { data: { firstName, lastName } };
  }
  if (password) {
    updatedObject = { password };
  }

  // Keep the existing auth table update logic unchanged
  const { data: updatedUser, error } = await supabase.auth.updateUser(
    updatedObject
  );

  if (error) {
    throw new Error(error.message);
  }

  // Update the authUsers table
  const userId = updatedUser.user.id;
  if (firstName && lastName) {
    const { error: authError } = await supabase
      .from('authUsers')
      .update({
        firstName,
        lastName,
      })
      .eq('authUserId', userId);

    if (authError) {
      throw new Error(authError.message);
    }
  }

  return updatedUser;
}

export async function UpdateProfileImage({ avatar }) {
  const fileName = `avatar-${avatar.name}-${Math.random()}`;

  const { error: storageError } = await supabase.storage
    .from('avatars')
    .upload(fileName, avatar);

  if (storageError) {
    throw new Error(storageError.message);
  }

  const { data: updatedUserAvatar, error: error2 } =
    await supabase.auth.updateUser({
      data: {
        avatar: `${supabaseUrl}/storage/v1/object/public/avatars/${fileName}`,
      },
    });

  if (error2) {
    throw new Error(error2.message);
  }

  const userId = updatedUserAvatar.user.id;

  const { error: authError } = await supabase
    .from('authUsers')
    .update({
      avatar: `${supabaseUrl}/storage/v1/object/public/avatars/${fileName}`,
    })
    .eq('authUserId', userId);

  if (authError) {
    throw new Error(authError.message);
  }
  return updatedUserAvatar;
}
